import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
BATCH_SEIZE = 30
seed = 2
#基于seed 产生随机数
rdm = np.random.RandomState(seed)
#随机数返回300行2列得矩阵，表示300组坐标点（x0,x1）作为输入数据集
X=rdm.randn(300,2)
#从 x 这个300行2列得矩阵中，取出一行，判断如果两个作为的平方和小于2
#作为输入数据集得标签（正确答案）
Y_= [int(x0*x0 +x1* x1<2) for (x0,x1) in X]
#遍历Y中得每个元素，1赋值red其余赋值blue 这样可视化显示 可以易于区别
Y_c = [['red' if y else 'blue'] for y in Y_]
#对于数据集X和标签Y进行shape整理，第一个元素为-1表示，随第二个参数机算得到
#第二个元素表示多少列，把X整理为N行2列，把Y整理为n行1列
X= np.vstack(X).reshape(-1,2)
Y_= np.vstack(Y_).reshape(-1,1)
print(X)
print(Y_)
print(Y_c)
#用plt.scatter画出数据集X各行中第0列元素和第一列元素得点即各行（x0,x1）
#用各行Y_c对应得值表示颜色
plt.scatter(X[:,0],X[:,1], c =np.squeeze(Y_c))

plt.show()
#定义神经网络得输入，参数和输出，定义向前传播过程
def get_weight(shape,regularizer):
    w =tf.Variable(tf.random_normal(shape),dtype=tf.float32)
    tf.add_to_collection('losses',tf.contrib.layers.l2_regularizer(regularizer)(w))
    return w
def get_bias(shape):
    b= tf.Variable(tf.constant(0.01,shape=shape))
    return b
x= tf.placeholder(tf.float32,shape=(None,2))
y_= tf.placeholder(tf.float32,shape=(None,1))
w1 = get_weight([2,11], 0.01)
b1 = get_bias([11])
y1 = tf.nn.relu(tf.matmul(x,w1)+b1)
w2 = get_weight([11,1], 0.01)
b2 = get_bias([1])
y = tf.nn.relu(tf.matmul(y1,w2)+b2)

loss_mse =tf.reduce_mean(tf.square(y-y_))
loss_tatal = loss_mse+tf.add_n(tf.get_collection("losses"))
train_step = tf.train.AdamOptimizer(0.0001).minimize(loss_mse)
with tf.Session() as sess:
    init_op = tf.global_variables_initializer()
    sess.run(init_op)
    STEPS = 40000
    for i in range(STEPS):
        start =(i*BATCH_SEIZE) %300
        end = start+BATCH_SEIZE
        sess.run(train_step,feed_dict={x:X[start:end],y_:Y_[start:end]})
        if i %2000 == 0:
            loss_mse_v= sess.run(loss_mse,feed_dict={x:X,y_:Y_})
            print(i,loss_mse_v)
    xx,yy = np.mgrid[-3:3:.01,-3:3:.01]
    grid = np.c_[xx.ravel(),yy.ravel()]
    probs = sess.run(y,feed_dict={x:grid})
    probs = probs.reshape(xx.shape)
    print(sess.run(w1))
    print(sess.run(b1))
    print(sess.run(w2))
    print(sess.run(b2))
plt.scatter(X[:,0],X[:,1],c=np.squeeze(Y_c))
plt.contour(xx,yy,probs,levels=[.5])
plt.show()

train_step = tf.train.AdamOptimizer(0.0001).minimize(loss_tatal)
with tf.Session() as sess:
    init_op = tf.global_variables_initializer()
    sess.run(init_op)
    STEPS = 40000
    for i in range(STEPS):
        start =(i*BATCH_SEIZE) %300
        end = start+BATCH_SEIZE
        sess.run(train_step,feed_dict={x:X[start:end],y_:Y_[start:end]})
        if i %2000 == 0:
            loss_v= sess.run(loss_mse,feed_dict={x:X,y_:Y_})
            print(i,loss_v)
    xx,yy = np.mgrid[-3:3:.01,-3:3:.01]
    grid = np.c_[xx.ravel(),yy.ravel()]
    probs = sess.run(y,feed_dict={x:grid})
    probs = probs.reshape(xx.shape)
    print(sess.run(w1))
    print(sess.run(b1))
    print(sess.run(w2))
    print(sess.run(b2))
plt.scatter(X[:,0],X[:,1],c=np.squeeze(Y_c))
plt.contour(xx,yy,probs,levels=[.5])
plt.show()
